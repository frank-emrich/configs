# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="${MY_DOTFILE_CONFIGS_DIR}/zsh/oh-my-zsh/"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
 HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
 COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
ZSH_CUSTOM="${MY_DOTFILE_CONFIGS_DIR}/zsh/oh-my-zsh-custom"

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(zsh-autosuggestions zsh-syntax-highlighting zaw)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"


#Magic fix for long line pasting
zstyle ':bracketed-paste-magic' active-widgets '.self-*'


source "${MY_DOTFILE_CONFIGS_DIR}/aliases"

bindkey -e  # Use emacs key bindings

#source /home/frank/build/zaw/zaw.zsh
bindkey '^R' zaw-history
bindkey -M filterselect '^R' down-line-or-history
bindkey -M filterselect '^S' up-line-or-history
bindkey -M filterselect '^E' accept-search
#bindkey -M filterselect '^F' accept-search #arrow right

zstyle ':filter-select' case-insensitive yes # enable case-insensitive
zstyle ':filter-select' max-lines -30 # use $LINES - 30 for filter-select

#bindkey "^R" znt-history-widget

#move by words:
bindkey "^[[1;5D" backward-word
bindkey "^[[1;5C" forward-word

#Ctrl+ backspace / del
bindkey "^[[3;5~" kill-word #Ctrl+del
bindkey "^_" backward-delete-word #Ctrl+backspace

#darker auto suggestions:
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=235'


mkdir -p ~/.zsh_histories


#TODO: this is the same as in the ec script,
# unify!
if [ -z "$TMUX" ] && [ -z "$TMUX_PANE" ]
then
      cname="notmux"
else
      cname="tmux-$(tmux display-message -p '#S')"
fi


#History config:


up-line-or-local-history() {
    zle set-local-history 1
    zle up-line-or-history
    zle set-local-history 0
}
zle -N up-line-or-local-history
down-line-or-local-history() {
    zle set-local-history 1
    zle down-line-or-history
    zle set-local-history 0
}
zle -N down-line-or-local-history


## without Ctrl: browse local history
bindkey "^[[A" up-line-or-local-history
bindkey "^[[B" down-line-or-local-history

# with Ctrl, browse normal (non-shared shared) history
bindkey "^[[1;5A" up-line-or-history    # [CTRL] + Cursor up
bindkey "^[[1;5B" down-line-or-history  # [CTRL] + Cursor down

HISTSIZE=5000                #How many lines of history to keep in memory
HISTFILE=~/.zsh_histories/"$cname"      #Where to save history to disk
SAVEHIST=50000               #Number of history entries to save to disk
#HISTDUP=erase               #Erase duplicates in the history file
#setopt    appendhistory      #Append history to the history file (no overwriting)
setopt    sharehistory      #Share history across terminals
#setopt incappendhistory      #Immediately append to the history file, not just when a term is killed


# Split variables like sh/bash:
# x = "hello world"
# some_prog $x
# will pass two args (sh/bash) rather than one (zsh)
setopt shwordsplit

export START_TIME=0

set_start_time() {
  START_TIME=$(date '+%s%3N') ;
}

CTRL_C_EXIT_CODE=130

set_exec_time() {
    cur=$(date '+%s%3N');
    if [[ ($START_TIME -ne 0) && ($? -ne $CTRL_C_EXIT_CODE) ]] ; then
	diff=$((cur-START_TIME));
	diff_formatted="TODO"
	if [[ $diff -lt  10000 ]] ; then
	    diff_formatted=$(echo "$diff" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
	    diff_formatted="$diff_formatted ms"
	elif [ $diff -lt 300000 ] ; then #less than 5 minutes
	    diff_formatted="$((diff / 1000)) s"
	else
	    diff_formatted="$((diff / 60000)) min"
	fi

	export EXECUTION_TIME="$diff_formatted"
    else
	unset EXECUTION_TIME
    fi
}


add-zsh-hook preexec set_start_time
add-zsh-hook precmd set_exec_time


#Update variables like DISPLAY from tmux environment
if [ -n "$TMUX" ]; then
  function refresh_env_from_tmux {
    vars="DISPLAY SSH_CONNECTION"
    for v in $vars ; do
      #test if variable is in environment (entry does not start with -)
      if tmux show-environment | grep -E "^$v" > /dev/null ; then
        #outer " " to suppport variable whose contents support spaces
        export "$(tmux show-environment $v)"
      fi
    done

  }
  add-zsh-hook preexec refresh_env_from_tmux
fi




if which "powerline" > /dev/null ; then
    powerline-daemon -q
    root_path=$(pip3 show powerline-status | grep "Location: " | cut -c 11-)
    . ${root_path}/powerline/bindings/zsh/powerline.zsh

fi

#start tmux on ssh login into this machine
if [ -z "$TMUX" ] && [ -n "$SSH_TTY" ] && [[ $- =~ i ]]; then
    tmux attach-session || tmux new-session -s "misc"
    #exit
else
  #unset TMUX, was probably due to SSH forwarding
  #unset TMUX
fi
